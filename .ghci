:{
  -- left to right composition
  (>.>) :: (a -> b) -> (b -> c) -> a -> c
  infixr 1 >.>
  (>.>) = flip (.)

  -- left to right application
  (|>) :: a -> (a -> b) -> b
  infixr 1 |>
  (|>) = flip ($)

  -- 2 argument right to left composition eg `add2ThenDouble = (*2) ... (+)`
  (...) :: (b -> c) -> (a1 -> a2 -> b) -> a1 -> a2 -> c
  infixr 1 ...
  (...) = (.) . (.)

  -- 3 argument compositon is achieved by (....) = (.) . (...)
  -- 4 argument = (.) . (....)
  -- etc

  join' :: String -> [String] -> String
  join' _   []     = ""
  join' _   [x]    = x
  join' str (x:xs) = x ++ str ++ join' str xs

  wordsWhen :: (Char -> Bool) -> String -> [String]
  wordsWhen p s =  case dropWhile p s of
    "" -> []
    s' -> w : wordsWhen p s''
      where (w, s'') = break p s'

  abbrvModule :: String -> String
  abbrvModule ('*':xs) = '*':xs
  abbrvModule m        = join' "." $ map ((:"") . head) $ wordsWhen (=='.') m

  whiteFG     = "\ESC[38;5;255m\STX"
  greyBG      = "\ESC[48;5;237m\STX"
  greyFG      = "\ESC[38;5;237m\STX"
  blueBG      = "\ESC[48;5;31m\STX"
  blueFG      = "\ESC[38;5;31m\STX"
  pinkFG      = "\ESC[1;35m\STX"
  blankBG     = "\ESC[1;49m\STX"
  lightGreyFG = "\ESC[38;5;240m\STX"
  lightGreyBG = "\ESC[48;5;240m\STX"

  promptFunction :: Bool -> [String] -> Int -> IO String
  promptFunction isCont modules line = return (left ++ mods ++ right)
    where
      mainBG         = if isCont then lightGreyBG else blueBG
      arrowFG        = if isCont then lightGreyFG else blueFG
      showSeparator  = if length modules > 0 then concat [arrowFG, greyBG, "\57520 "] else ""
      left           = concat [ mainBG , whiteFG , " λ "
                              , greyFG , ": ["
                              , whiteFG , show line
                              , greyFG , "] "
                              , showSeparator
                              , pinkFG
                              ]
      mods           = join' (concat [" ", greyFG, "| ", pinkFG]) $ map abbrvModule modules;
      powerlineColor = if length modules > 0 then greyFG else arrowFG
      right          = concat [" ", powerlineColor, blankBG,  "\57520 \ESC[m\STX"]

  pf :: [String] -> Int -> IO String
  pf = promptFunction False

  pcf :: [String] -> Int -> IO String
  pcf = promptFunction True
:}

-- :set prompt "\ESC[38;5;39m\ESC[48;5;240m\STX λ :: \ESC[1;35m\STX%s \ESC[38;5;240m\ESC[1;49m \ESC[m\STX"
:set prompt-cont-function pcf
:set prompt-function pf

-- OverloadedStrings is often useful.
:set -XOverloadedStrings

-- Scoped type variables is often useful so we can specify the types
-- of variables (for example, in lambda expressions).
:set -XScopedTypeVariables

-- useful for import from specified package
:set -XPackageImports

-- Show the types of evaluated expressions
:set +t

-- And stats
:set +s

-- Enable multi-line expressions with :{ and :}
:set +m
