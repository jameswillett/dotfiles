const fs = require('fs');

const { getIpInfo, getYahooWeather } = require('./apiStuff');

const width = process.argv[2];
const invokeImmediately = process.argv[3];

const lastWeather = `${process.env.HOME}/lastweather.json`;

const emojiDict = {
  0: 'üå™', 1: 'üåÄ', 2: 'üåÄ', 3: '‚ö°Ô∏è‚ùóÔ∏è', 4: '‚ö°Ô∏è', 5: 'üåß‚ùÑÔ∏è',
  6: 'üåßüßä', 7: '‚ùÑÔ∏èüßä', 8: 'üßäüí¶', 9: 'üí¶', 10: 'üßäüåß',
  11: '‚òîÔ∏è', 12: 'üåß', 13: '‚õÑÔ∏è', 14: 'üå®', 15: 'üå¨üå®',
  16: '‚õÑÔ∏è', 17: 'üßä', 18: 'üßä', 19: 'üü´', 20: 'üåÅ',
  21: 'üå´', 22: 'üî•', 23: 'üå¨', 24: 'üå¨', 25: 'ü•∂',
  26: '‚òÅÔ∏è', 27: 'üå•', 28: 'üå•', 29: 'üå§', 30: 'üå§',
  31: 'üåö', 32: 'üåû', 33: 'üåë', 34: '‚òÄÔ∏è', 35: 'üåß/üßä',
  36: 'ü•µ', 37: '‚ö°Ô∏è', 38: '‚ö°Ô∏è', 39: '‚òîÔ∏è', 40: 'üåß‚ùóÔ∏è',
  41: '‚ùÑÔ∏è‚òîÔ∏è', 42: '‚òÉÔ∏è', 43: '‚òÉÔ∏è‚ùóÔ∏è', 45: '‚òîÔ∏è', 46: '‚ùÑÔ∏è‚òîÔ∏è',
  47: '‚ö°Ô∏è‚òîÔ∏è',
};

const getColor = temp => {
  let R = 15, G = 15, B = 15;

  if (temp >= 100) {
    R = 15;
    G = 0;
    B = 0;
  } else if (temp >= 85) {
    R = 15;
    G = 100 - temp;
    B = 0;
  } else if (temp >= 70) {
    R = temp - 70;
    G = 15;
    B = 0;
  } else if (temp >= 55) {
    R = 0;
    G = 15;
    B = 70 - temp;
  } else if (temp >= 40) {
    R = 4;
    G = temp - 40;
    B = 15;
  } else if (temp >= 25) {
    R = 40 - temp;
    G = 4;
    B = 15;
  } else if (temp >= 10) {
    R = 15;
    G = 25 - temp;
    B = 15;
  }

  const hex = ['#',
    (R + (16 * R)).toString(16),
    (G + (16 * G)).toString(16),
    (B + (16 * B)).toString(16),
  ].join('');

  return `#[fg=${hex},bold]${temp}#[fg=colour255,nobold]`;
};

const makeString = ({ code, temp, high, low, tCode, tHigh, tLow }) => {
  const c = '#000000';
  const main = `#[fg=${c}]ÓÇ≤#[bg=${c},fg=colour255] ${emojiDict[code] || '‚ùì'}  ${getColor(temp)}‚Ñâ`;
  if (width < 200) return main;
  const highLow = ` [${getColor(high)}‚Ñâ/${getColor(low)}‚Ñâ]`;
  if (width < 220 ) return main + highLow;
  const tomorrow = ` => [${emojiDict[tCode] ||  '‚ùì'}  ${getColor(tHigh)}‚Ñâ/${getColor(tLow)}‚Ñâ]`;
  return main + highLow + tomorrow;
};

const now = new Date();

if ((now.getMinutes() % 3 === 0 && now.getSeconds() === 0) || invokeImmediately) {
  getIpInfo()
    .then(({ /* postal, */ lat, lng }) => getYahooWeather(lat, lng))
    .then((d) => {
      const [ today, tomorrow ] = d.forecasts;
      const code = today.code;
      const weather = today.text;
      const temp = Math.floor(d['current_observation'].condition.temperature);
      const high = Math.floor(today.high);
      const low = Math.floor(today.low);
      const tHigh = Math.floor(tomorrow.high);
      const tLow = Math.floor(tomorrow.low);
      const tCode = tomorrow.code;
      const tWeather = tomorrow.text;
      const sunset = d['current_observation'].astronomy.sunset;
      const sunrise = d['current_observation'].astronomy.sunrise;
      const parts = {
        code, weather, temp, high, low, sunset, sunrise,
        tCode, tWeather, tHigh, tLow,
      };
      const string = makeString(parts);
      const cached = JSON.stringify({...parts, timestamp: new Date()});
      fs.writeFileSync(lastWeather, cached, { encoding: 'utf8' });
      console.log(string);
    }).catch((e) => {
      console.log(e);
      console.log('');
    });
} else {
  try {
    const raw = fs.readFileSync(lastWeather, { encoding: 'utf8' });
    console.log(makeString(JSON.parse(raw)));
  } catch(e) { // eslint-disable-line no-empty
  }
}
